#!/usr/bin/env node

/**
 * Generate Markdown coverage report from Jest coverage data
 */

const fs = require('fs');
const path = require('path');

const COVERAGE_DIR = 'coverage';
const COVERAGE_SUMMARY_FILE = path.join(COVERAGE_DIR, 'coverage-summary.json');
const OUTPUT_FILE = 'TEST_COVERAGE_REPORT.md';

function generateMarkdownReport() {
  console.log('üìä Generating test coverage report...');

  if (!fs.existsSync(COVERAGE_SUMMARY_FILE)) {
    console.error('‚ùå Coverage summary file not found. Please run tests with coverage first.');
    process.exit(1);
  }

  const coverageData = JSON.parse(fs.readFileSync(COVERAGE_SUMMARY_FILE, 'utf8'));
  const timestamp = new Date().toISOString();
  
  let report = `# Test Coverage Report

Generated on: ${timestamp}

## Overall Coverage Summary

| Metric | Percentage | Covered | Total |
|--------|------------|---------|-------|
| **Statements** | ${coverageData.total.statements.pct}% | ${coverageData.total.statements.covered} | ${coverageData.total.statements.total} |
| **Branches** | ${coverageData.total.branches.pct}% | ${coverageData.total.branches.covered} | ${coverageData.total.branches.total} |
| **Functions** | ${coverageData.total.functions.pct}% | ${coverageData.total.functions.covered} | ${coverageData.total.functions.total} |
| **Lines** | ${coverageData.total.lines.pct}% | ${coverageData.total.lines.covered} | ${coverageData.total.lines.total} |

`;

  // Coverage status
  const overallCoverage = [
    coverageData.total.statements.pct,
    coverageData.total.branches.pct,
    coverageData.total.functions.pct,
    coverageData.total.lines.pct
  ];
  
  const minCoverage = Math.min(...overallCoverage);
  const coverageStatus = minCoverage >= 90 ? '‚úÖ PASSED' : '‚ùå FAILED';
  const threshold = 90;

  report += `## Coverage Status

**Status: ${coverageStatus}** (Threshold: ${threshold}%)

`;

  if (minCoverage < threshold) {
    report += `‚ö†Ô∏è  **Coverage below threshold!** Current minimum coverage: ${minCoverage}%

`;
  }

  // Detailed file coverage
  report += `## File Coverage Details

| File | Statements | Branches | Functions | Lines |
|------|------------|----------|-----------|-------|
`;

  const files = Object.keys(coverageData).filter(key => key !== 'total');
  files.sort().forEach(file => {
    const data = coverageData[file];
    const relativeFile = file.replace(process.cwd() + '/', '');
    
    report += `| \`${relativeFile}\` | ${data.statements.pct}% | ${data.branches.pct}% | ${data.functions.pct}% | ${data.lines.pct}% |
`;
  });

  report += `

## Files Requiring Attention

`;

  const lowCoverageFiles = files.filter(file => {
    const data = coverageData[file];
    return Math.min(
      data.statements.pct,
      data.branches.pct,
      data.functions.pct,
      data.lines.pct
    ) < threshold;
  });

  if (lowCoverageFiles.length === 0) {
    report += `üéâ All files meet the coverage threshold of ${threshold}%!

`;
  } else {
    lowCoverageFiles.forEach(file => {
      const data = coverageData[file];
      const relativeFile = file.replace(process.cwd() + '/', '');
      const minCoverage = Math.min(
        data.statements.pct,
        data.branches.pct,
        data.functions.pct,
        data.lines.pct
      );
      
      report += `- **${relativeFile}**: ${minCoverage}% (lowest coverage)
`;
    });
  }

  report += `

## SonarCloud Integration

This coverage report is generated in LCOV format and can be uploaded to SonarCloud for analysis.

Coverage files:
- \`coverage/lcov.info\` - LCOV format for SonarCloud
- \`coverage/clover.xml\` - Clover XML format
- \`coverage/coverage-final.json\` - Jest coverage data

## Running Tests

\`\`\`bash
# Run all tests
npm test

# Run tests with coverage
npm run test:coverage

# Run tests in watch mode
npm run test:watch

# Generate this report
npm run test:coverage-report
\`\`\`

---
Report generated by Jest coverage analysis
`;

  fs.writeFileSync(OUTPUT_FILE, report);
  console.log(`‚úÖ Coverage report generated: ${OUTPUT_FILE}`);
  console.log(`üìä Overall coverage: ${minCoverage}% (threshold: ${threshold}%)`);
  
  if (minCoverage < threshold) {
    console.log(`‚ö†Ô∏è  Coverage below threshold! Please add more tests.`);
    process.exit(1);
  } else {
    console.log(`üéâ Coverage threshold met!`);
  }
}

if (require.main === module) {
  generateMarkdownReport();
}

module.exports = generateMarkdownReport;
